.TH AUDITCTL: "8" "Jan 2007" "Red Hat" "System Administration Utilities"
.SH NAME
auditctl \- a utility to assist controlling the kernel's audit system
.SH SYNOPSIS
\fBauditctl\fP [\fIoptions\fP]
.SH DESCRIPTION
The \fBauditctl\fP program is used to control the behavior, get status, and add or delete rules into the 2.6 kernel's audit system.
.SH OPTIONS
.TP
.BI \-b\  backlog
Set max number of outstanding audit buffers allowed (Kernel Default=64) If all buffers are full, the failure flag is consulted by the kernel for action.
.TP
\fB\-e\fP [\fB0\fP..\fB2\fP]
Set enabled flag. When \fB0\fP is passed, this can be used to temporarily disable auditing. When \fB1\fP is passed as an argument, it will enable auditing. To lock the audit configuration so that it can't be changed, pass a \fB2\fP as the argument. Locking the configuration is intended to be the last command in audit.rules for anyone wishing this feature to be active. Any attempt to change the configuration in this mode will be audited and denied. The configuration can only be changed by rebooting the machine.
.TP
\fB\-f\fP [\fB0\fP..\fB2\fP]
Set failure flag
\fB0\fP=silent \fB1\fP=printk \fB2\fP=panic. This option lets you determine how you want the kernel to handle critical errors. Example conditions where this flag is consulted includes: transmission errors to userspace audit daemon, backlog limit exceeded, out of kernel memory, and rate limit exceeded. The default value is \fB1\fP. Secure environments will probably want to set this to \fB2\fP.
.TP
.B \-h
Help
.TP
.B \-i
Ignore errors when reading rules from a file
.TP
.B \-l
List all rules 1 per line.
.TP
.BI \-k\  key
Set a filter key on an audit rule. The filter key is an arbitrary string of text that can be up to 31 bytes long. It can uniquely identify the audit records produced by the watch.
.TP
.BI \-m\  text
Send a user space message into the audit system. This can only be done by the root user.
.TP
\fB\-p\fP [\fBr\fP|\fBw\fP|\fBx\fP|\fBa\fP]
Set permissions filter for a file system watch. \fBr\fP=read, \fBw\fP=write, \fBx\fP=execute, \fBa\fP=attribute change. These permissions are not the standard file permissions, but rather the kind of syscall that would do this kind of thing. The read & write syscalls are omitted from this set since they would overwhelm the logs. But rather for reads or writes, the open flags are looked at to see what permission was requested.
.TP
.BI \-r\  rate
Set limit in messages/sec (\fB0\fP=none). If this \fIrate\fP is non-zero and is exceeded, the failure flag is consulted by the kernel for action. The default value is \fB0\fP.
.TP
.BI \-R\  file
Read rules from a \fIfile\fP. The rules must be 1 per line and in the order that they are to be executed in. The rule file must be owned by root and not readable by other users or it will be rejected. The rule file may have comments embedded by starting the line with a '#' character. Rules that are read from a file are identical to what you would type on a command line except they are not preceeded by auditctl (since auditctl is the one executing the file).
.TP
.B \-s
Report status
.TP
.BI \-a\  list , action
Append rule to the end of \fIlist\fP with \fIaction\fP. Please note the comma separating the two values. Omitting it will cause errors. The following describes the valid \fIlist\fP names:
.RS
.TP 12
.B task
Add a rule to the per task list. This rule list is used only at the time a task is created -- when fork() or clone() are called by the parent task. When using this list, you should only use fields that are known at task creation time, such as the uid, gid, etc.
.TP
.B entry
Add a rule to the syscall entry list. This list is used upon entry to a system call to determine if an audit event should be created.
.TP
.B exit
Add a rule to the syscall exit list. This list is used upon exit from a system call to determine if an audit event should be created.
.TP
.B user
Add a rule to the user message filter list. This list is used by the kernel to filter events originating in user space before relaying them to the audit daemon. It should be noted that the only fields that are valid are: uid, auid, gid, and  pid. All other fields will be treated as non-matching.
.TP
.B exclude
Add a rule to the event type exclusion filter list. This list is used to filter events that you do not want to see. For example, if you do not want to see any avc messages, you would using this list to record that. The message type that you do not wish to see is given with the msgtype field. 
.RE

The following describes the valid \fIactions\fP for the rule:
.RS
.TP 12
.B never
No audit records will be generated. This can be used to suppress event generation. In general, you want suppressions at the top of the list instead of the bottom. This is because the event triggers on the first matching rule.
.TP
.B always
Allocate an audit context, always fill it in at syscall entry time, and always write out a record at syscall exit time.
.RE
.TP
.BI \-A\  list , action
Add rule to the beginning \fIlist\fP with \fIaction\fP.
.TP
.BI \-d\  list , action
Delete rule from \fIlist\fP with \fIaction\fP. The rule is deleted only if it exactly matches syscall name and field names.
.TP
.B \-D
Delete all rules and watches.
.TP
\fB\-S\fP [\fISyscall name or number\fP|\fBall\fP]
Any \fIsyscall name\fP or \fInumber\fP may be used. The word '\fBall\fP' may also be used.  If this syscall is made by a program, then start an audit record. If a field rule is given and no syscall is specified, it will default to all syscalls. You may also specify multiple syscalls in the same rule. Doing so improves performance since fewer rules need to be evaluated.
.TP
\fB\-F\fP [\fIn\fP\fB=\fP\fIv\fP | \fIn\fP\fB!=\fP\fIv\fP | \fIn\fP\fB<\fP\fIv\fP | \fIn\fP\fB>\fP\fIv\fP | \fIn\fP\fB<=\fP\fIv\fP | \fIn\fP\fB>=\fP\fIv\fP | \fIn\fP\fB&\fP\fIv\fP | \fIn\fP\fB&=\fP\fIv\fP]
Build a rule field: name, operation, value. You may have up to 64 fields passed on a single command line. Each one must start with \fB\-F\fP. Each field equation is anded with each other to trigger an audit record. There are 8 operators supported - equal, not equal, less than, greater than, less than or equal, and greater than or equal, bit mask, and bit test respectively. Bit test will "and" the values and check that they are equal, bit mask just "ands" the values. Fields that take a user ID may instead have the user's name; the program will convert the name to user ID. The same is true of group names. Valid fields are:
.RS
.TP 12
.B a0, a1, a2, a3
Respectively, the first 4 arguments to a syscall. Note that string arguments are not supported. This is because the kernel is passed a pointer to the string. Triggering on a pointer address value is not likely to work. So, when using this, you should only use on numeric values. This is most likely to be used on platforms that multiplex socket or IPC operations.
.TP
.B arch
The CPU architecture of the syscall. The arch can be found doing 'uname -m'. If you do not know the arch of your machine but you want to use the 32 bit syscall table and your machine supports 32 bit, you can also use
.TP
.B auid
The original ID the user logged in with. Its an abbreviation of audit uid.
.TP
.B b32
for the arch. The same applies to the 64 bit syscall table, you can use
.TP
.B b64.
.TP
.B devmajor
Device Major Number
.TP
.B devminor
Device Minor Number
.TP
.B egid
Effective Group ID
.TP
.B euid
Effective User ID
.TP
.B exit
Exit value from a syscall
.TP
.B fsgid
Filesystem Group ID
.TP
.B fsuid
Filesystem User ID
.TP
.B gid
Group ID
.TP
.B inode
Inode Number
.TP
.B key
This is another way of setting a filter key. See discussion above for \fB\-k\fP option.
.TP
.B msgtype
This is used to match the message type number. It should only be used on the exclude filter list.
.TP
.B obj_user
Resource's SE Linux User
.TP
.B obj_role
Resource's SE Linux Role
.TP
.B obj_type
Resource's SE Linux Type
.TP
.B obj_lev_low
Resource's SE Linux Low Level
.TP
.B obj_lev_high
Resource's SE Linux High Level
.TP
.B path
Full Path of File to watch. See "\fB\-w\fP". Should only be used on exit list.
.TP
.B perm
Permission filter for file operations. See "\fB\-p\fP". Should only be used on exit list.
.TP
.B pers
OS Personality Number
.TP
.B pid
Process ID
.TP
.B ppid
Parent's Process ID
.TP
.B subj_user
Program's SE Linux User
.TP
.B subj_role
Program's SE Linux Role
.TP
.B subj_type
Program's SE Linux Type
.TP
.B subj_sen
Program's SE Linux Sensitivity
.TP
.B subj_clr
Program's SE Linux Clearance
.TP
.B sgid
Set Group ID
.TP
.B success
If the exit value is >= 0 this is true/yes otherwise its false/no. When writing a rule, use a 1 for true/yes and a 0 for false/no
.TP
.B suid
Set User ID
.TP
.B uid
User ID
.RE
.TP
.BI \-w\  path
Insert a watch for the file system object at \fIpath\fP. You cannot insert a watch to the top level directory. This is prohibited by the kernel. Wildcards are not supported either and will generate a warning. The way that watches work is by tracking the inode internally. This means that if you put a watch on a directory, you will see what appears to be file events, but it is really just the updating of meta data. You might miss a few events by doing this. If you need to watch all files in a directory, its recommended to place an individual watch on each file. Unlike syscall auditing rules, watches do not impact performance based on the number of rules sent to the kernel.
.TP
.BI \-W\  path
Remove a watch for the file system object at \fIpath\fP.
.SH "EXAMPLES"
To see all syscalls made by a specific program:

.nf
.B auditctl \-a entry,always \-S all \-F pid=1005
.fi

To see files opened by a specific user:

.nf
.B auditctl \-a exit,always \-S open \-F auid=510
.fi

To see unsuccessful open call's:

.nf
.B auditctl \-a exit,always \-S open \-F success!=0
.fi

.SH FILES
.TP
.I /etc/audit/audit.rules

.SH "SEE ALSO"
.BR auditd (8).

.SH AUTHOR
Steve Grubb
